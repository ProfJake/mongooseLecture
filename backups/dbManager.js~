/*Jake Levy

Code adapted from : https://branche.online/mongodb-with-promises/

You can use this as a starting point for your own database manager class, in
your semester projects.

Its a bad habit to open and close a connection EVERY time you want to do 
something.Its better to "pool" connections (in other words maintain a standard
group size) and cycle through what is available.  In this scenario, our pool
size is only one. This is essentially a "singleton" design pattern.

While this simplifies a lot of things (only one connection to manage), it can
create a bottleneck because all of our data is going down the same pipeline.
Data intensive applications might have several connections managed by an object
(like in our chat lab) and some meta data.


*/
const MongoClient = require('mongodb').MongoClient;
var getID = require('mongodb').ObjectID();
var url = "mongodb://127.0.0.1:27017/";
let database = {};
//https://stackoverflow.com/questions/61277898/useunifiedtopology-true-pass-deprecated
let mongoClient = MongoClient(url,{ useUnifiedTopology: true });
let myDB; //let provides closure, so only one local copy of our db. Th
//functionally makes this static (one copy for all instances)

function wasSuccessful(resp){
    return ( resp == 1 ? "Success! 1 document was inserted" : "Failure! No documents inserted");
}

database.connect = async function(dbName){



    try{
	await mongoClient.connect();

	myDB=mongoClient.db(dbName);
	
	if (!myDB){
	    throw new Error("DB Connection Failed to start!");
	}
	else{
	    console.log(`Connected to ${dbName}`);
	    return myDB;
	}
    } catch(e){
	console.log(e.message);
    }
}


database.get = function(dbName){
    if (myDB){
	console.log("Already connected!");
	return myDB;
    } else {
	return this.connect(dbName);
    }
}


//call close in your apps when you want to close
database.close = async function(){

    try{
	await mongoClient.close();
	return;
    } catch(e){
	console.log(e.message);
    }
 }
    


module.exports = database;